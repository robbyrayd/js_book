//#1
//What does this code log to the console? Does executing the foo function affect the output? Why or why not?
//let bar = 1;
//function foo() {
//  let bar = 2;
//}

//foo();
//console.log(bar);
//> The code logs 1 to the console. foo() has no affect on the final output. foo doesn't 
//affect the value assigned to bar since it is contained within the inner scope

//#2
//In the exercises for the previous chapter, you wrote a dynamic greeter program named greeter.js. 
//Add a function to this program that solicits the user's first and last names in separate invocations; 
//the function should return the appropriate name as a string. Use the return values to greet the user with their full name.
//> /Users/rdomasing/Documents/js_book/InputOutput/greeter.js

//#3
//Write a program that uses a multiply function to multiply two numbers and returns the result. 
//Ask the user to enter the two numbers, then output the numbers and result as a simple equation.
//> /Users/rdomasing/Documents/js_book/Functions/multiply.js

//#4
//What does the following code log to the console?
//function scream(words) {
//  words = words + '!!!!';
//  return;
//  console.log(words);
//}

//scream('Yipeee');
//>'Yipeee!!!!' *WRONG*
//>It doesn't log anything. The return on line 3 terminates the function before it can log anything.

//#5
//What does the following code log to the console?
//function scream(words) {
//  return words + '!!!!';
//}

//scream('Yipeee');

//>value returned is 'Yipeee!!!!' but nothing is logged to the console.

//#6
//In the code shown below, identify the following items:

//the function arguments: 2, 3, 4
//the function body: let result = num1 * num2 * num3;
//  return result;
//the function declaration: The function declaration is everything on lines 1-4
//the function invocation: multiplyNumbers(2, 3, 4)
//the function name: multiplyNumbers
//the function parameters: num1, num2, num3
//the function return value: result of multipling arguments together
//the names of all variables in this program: multiplyNumbers, result, product, num1, num2, num3

//function multiplyNumbers(num1, num2, num3) {
//  let result = num1 * num2 * num3;
//  return result;
//}

//let product = multiplyNumbers(2, 3, 4);

//#7
//Without running the following code, what do you think it will output?
//function foo(bar, qux) {
//  console.log(bar);
//  console.log(qux);
//}

//foo('Hello');
//> Hello, undefined
//The qux variable inside foo 
//gets initialized to undefined when we fail to provide an explicit argument in the invocation.

//#8
//Without running the following code, what do you think it will output?
//function foo(bar, qux) {
//  console.log(bar);
//  console.log(qux);
//}

//foo(42, 3.1415, 2.718);
//> 42, 3.1415
//The 3rd argument to foo is ignored since the function definition only mentions two parameters.

//#9
//Identify all of the variables named on each line of the following code. 
//You may assume that question is the name of a built-in function in JavaScript 
//(it is not, so this code won't work as written).
//function multiply(left, right) {
//  let product = left * right;
//  return product;
//}

//function getNumber(prompt) {
//  return parseFloat(question(prompt));
//}

//let left = getNumber('Enter the first number: ');
//let right = getNumber('Enter the second number: ');
//console.log(`${left} * ${right} = ${multiply(left, right)}`);
//> Line 1: multiply, left, right: The function name and the parameter names are all variable names.
//Line 2: product, left, right
//Line 3: product
//Line 6: getNumber, prompt
//Line 7: parseFloat, question, prompt. parseFloat is an actual built-in function in JavaScript; 
//we are pretending that question also is a built-in function. As such, we know that both parseFloat and question are variable names.
//Line 10: left, getNumber
//Line 11: right, getNumber
//Line 12: console, left, right, multiply: console.log is a little tricky here. console is the variable name for 
//the built-in Console object. In contrast, console.log is the name of a method in that object. As such, log is a property name, not a variable name.

//#10
//Using the code from Exercise 9, classify each variable name as either global or local. For our purposes here, you may assume that the code from Exercise 9 is the entire program.
//Global Variables: multiply, getNumber, left, right, console, parseFloat, question.
//Local Variables: left, right, product, prompt

//#11
//Using the code from Exercise 9, are the left and right variables on lines 1 and 2 the same as the left and right variables o
//> They are not the same variables.

//The left and right variables declared on lines 10 and 11 are a little tricky. 
//(The function parameters shadow the variables on lines 10 and 11.) 
//Furthermore, they are global variables even though they are only accessible on line 12 
//They are considered global because they are defined at the topmost level of the program.

//The left and right parameters on line 1 are local variables since function parameters 
//are always local to the function. Thus, line 2 refers to the local variables.