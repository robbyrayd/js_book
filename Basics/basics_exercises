//#1
//Concatenate two or more strings, one with your first name and one with your last, to create a string with your full name as its value. For example, if your name is John Doe, think about how you can put 'John' and 'Doe' together to get 'John Doe'.

//console.log('Robby ' + 'Domasing')

//#2
//Using arithmetic operators, get the individual digits of a 4-digit number like 4936
//4936 % 10 = 6
//(4936 - 6) / 10 = 493
//493 % 10 = 3
//(493-3) / 10 = 49 % 10 = 9
//(49-9) / 10 = 4

//#3
//Identify the data type for each of the following values:
//'true' = string
//false = boolean
//1.5 = Number
//2 = Number
//undefined = Undefined
//{ foo: 'bar' } = object

//#4
//Explain why this code logs '510' instead of 15.
//console.log('5' + 10);
//> JavaScript concatenates the two values as though they were both strings.  
//By process of implicit type coercion , when using +, if either operand is a string and the other
//is not, JavaScript coerces the non-string operand to a string.

//#5
//Refactor the code from the previous exercise to use explicit coercion, so it logs 15 instead.
//console.log(Number('5') + 10);

//#6
//Use the template literal syntax along with the expression Number('5') + 10 to log the following sentence to the console:
////The value of 5 + 10 is 15.
//console.log(`The value of 5 + 10 is ${Number('5') + 10}.`)

//#7
//Will an error occur if you try to access an array element with an index that is greater than or equal to the length of the array? For example:
//let foo = ['a', 'b', 'c'];
//console.log(foo.length);  // => 3
//console.log(foo[3]);      // will this result in an error?
//> undefined={}

//#8
//Create an array named names that contains a list of pet names. For instance:
//Name
//asta
//butterscotch
//pudding
//neptune
//darwin
//> let names = ['asta', 'butterscotch', 'pudding', 'neptune', 'darwin']

//#9
//Create an object named pets that contains a list of pet names and the type of animal. For instance:

//Name	Animal
//asta	dog
//butterscotch	cat
//pudding	cat
//neptune	fish
//darwin	lizard
//> let pets = {
//  asta : 'dog',
//  butterscotch : 'cat',
//  pudding : 'cat',
//  neptune : 'fish',
//  darwin : 'lizard',
//}

//#10
//What value does the following expression evaluate to?
//'foo' === 'Foo'
//> false

//#11
//What value does the following expression evaluate to?
//parseInt('3.1415')
//> 3

//#12
//What value does the following expression evaluate to?
//'12' < '9'
//> NaN
//>Solution: the expression evaluates as true since the operands are strings, not numbers. 
//When you compare two strings, JavaScript performs a character-by-character comparison going from left to right, 
//so on the first comparison, it determines that '1' < '9', so '12' must be less than '9'.'